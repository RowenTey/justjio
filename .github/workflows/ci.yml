name: CI Pipeline

on:
  pull_request:
    branches:
      - main
      - dev
  workflow_dispatch:

jobs:
  lint-and-format-react:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ./client-web/package-lock.json

      - name: Install dependencies
        run: npm install
        working-directory: ./client-web

      - name: Lint React code
        run: npm run lint
        working-directory: ./client-web

      - name: Format React code
        run: npm run format
        working-directory: ./client-web

      - name: Check for changes
        id: git-check-react
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.git-check-react.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "style: Formatted code with prettier"

      - name: Push changes
        if: steps.git-check-react.outputs.changes == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  lint-and-format-go:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        modules: ["./server-api", "./server-ws"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
          cache-dependency-path: |
            ${{ matrix.modules }}/go.sum

      - name: golangci-lint ${{ matrix.modules }}
        uses: golangci/golangci-lint-action@v6
        with:
          args: --timeout=10m
          version: v1.60
          working-directory: ${{ matrix.modules }}

      - name: Format Go code
        run: |
          gofmt -s -w ${{ matrix.modules }}

      - name: Check for changes
        id: git-check-go
        run: |
          git diff --exit-code || echo "changes=true" >> $GITHUB_OUTPUT

      - name: Commit changes
        if: steps.git-check-go.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "style: Formatted code with go formatter"

      - name: Push changes
        if: steps.git-check-go.outputs.changes == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

  test-api-server:
    runs-on: ubuntu-latest
    needs: [lint-and-format-go, lint-and-format-react]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23
          cache: true
          cache-dependency-path: server-api/go.sum

      - name: Install dependencies
        run: cd server-api && go mod download

      - name: Run unit tests
        run: cd server-api && go test -v ./...

  run-security-scan:
    runs-on: ubuntu-latest
    needs: [test-api-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "HIGH,CRITICAL"
          exit-code: 0

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # display table and fail if severity detected
      - name: Display vulnerability table
        uses: aquasecurity/trivy-action@0.30.0
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          severity: "HIGH,CRITICAL"
          exit-code: 1
          # skip setting up trivy
          skip-setup-trivy: true
        # skip updating the database on 2nd run
        env:
          TRIVY_SKIP_DB_UPDATE: true
          TRIVY_SKIP_JAVA_DB_UPDATE: true

  run-sonarqube-scan:
    runs-on: ubuntu-latest
    needs: [test-api-server]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
