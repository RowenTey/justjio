name: justjio-dev

x-common-healthcheck: &common-healthcheck
  interval: 10s
  timeout: 5s
  retries: 5

services:
  frontend:
    image: ghcr.io/rowentey/justjio/web:latest
    build:
      context: ../client
      dockerfile: Dockerfile
    ports:
      - "80:80"
    environment:
      APP_ENV_PREFIX: VITE
      VITE_API_URL: http://localhost:8080/v1
      VITE_WS_URL: ws://localhost:8081
      VITE_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      VITE_VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VITE_ENV: dev
      VITE_CF_ACCESS_CLIENT_ID: ${CF_ACCESS_CLIENT_ID}
      VITE_CF_ACCESS_CLIENT_SECRET: ${CF_ACCESS_CLIENT_SECRET}
    depends_on:
      - api-server
      - ws-server
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:80/ || exit 1"]
      <<: *common-healthcheck

  api-server:
    image: ghcr.io/rowentey/justjio/api:latest
    build:
      context: ../../server/api
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NUv5oMuh1EWV
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgres
      PORT: 8080
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
      KAFKA_TOPIC_PREFIX: justjio
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      GOOGLE_REDIRECT_URL: http://localhost:80
      VAPID_EMAIL: ${ADMIN_EMAIL}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      SMTP2GO_API_KEY: ${SMTP2GO_API_KEY}
      ALLOWED_ORIGINS: http://localhost:80
    entrypoint: ["/api-server", "staging"]
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/ || exit 1"]
      <<: *common-healthcheck

  ws-server:
    image: ghcr.io/rowentey/justjio/ws:latest
    build:
      context: ../../server/ws
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
      JWT_SECRET: ${JWT_SECRET}
      KAFKA_TOPIC_PREFIX: justjio
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
      ALLOWED_ORIGINS: http://localhost:80
    depends_on:
      kafka:
        condition: service_started
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/ping || exit 1"]
      <<: *common-healthcheck

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # Bob is internal docker network listener
      # Fred is external listener
      KAFKA_ADVERTISED_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_BOB:PLAINTEXT,LISTENER_FRED:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_BOB
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      # KAFKA_LISTENERS: LISTENER_BOB://kafka:29092,LISTENER_FRED://kafka:9092
      # KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      PG_USER: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: NUv5oMuh1EWV
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - justjio-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      <<: *common-healthcheck

  # redis:
  #   image: redis:latest
  #   ports:
  #     - "6379:6379"

  # pgadmin:
  #   image: dpage/pgadmin4
  #   ports:
  #     - "5050:80"
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@test.com
  #     PGADMIN_DEFAULT_PASSWORD: admin

volumes:
  justjio-postgres-data:
